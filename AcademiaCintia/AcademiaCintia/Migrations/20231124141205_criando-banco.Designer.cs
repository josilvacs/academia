// <auto-generated />
using System;
using AcademiaCintia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AcademiaCintia.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20231124141205_criando-banco")]
    partial class criandobanco
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("AcademiaCintia.Models.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Categoria");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Nome = "Fitness"
                        },
                        new
                        {
                            Id = 2,
                            Nome = "Dança"
                        },
                        new
                        {
                            Id = 3,
                            Nome = "Alongamento"
                        });
                });

            modelBuilder.Entity("AcademiaCintia.Models.Comentario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("ComentarioData")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ComentarioTexto")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<byte?>("Nota")
                        .HasColumnType("tinyint unsigned");

                    b.HasKey("Id");

                    b.ToTable("Comentario");
                });

            modelBuilder.Entity("AcademiaCintia.Models.Galeria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.HasKey("Id");

                    b.ToTable("Galeria");
                });

            modelBuilder.Entity("AcademiaCintia.Models.Modalidade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("varchar(600)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Modalidade");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 2,
                            Descricao = "O Ballet Clássico traz diversos benefícios, como melhora da postura, flexibilidade, coordenação motora, força muscular, disciplina, expressão artística e bem-estar mental",
                            Foto = "/img/services/services-1.jpg",
                            Nome = "Ballet Clássico"
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 2,
                            Descricao = "O sapateado traz benefícios como melhora do ritmo, coordenação e consciência corporal. Além disso, é uma forma divertida de exercício que combina música e movimento.",
                            Foto = "/img/services/services-2.jpg",
                            Nome = "Sapateado"
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 2,
                            Descricao = "A Zumba é uma atividade física que combina dança e exercício aeróbico, trazendo benefícios como melhora da resistência cardiovascular, queima de calorias e aumento da coordenação motora.",
                            Foto = "/img/services/services-3.jpg",
                            Nome = "Zumba"
                        },
                        new
                        {
                            Id = 4,
                            CategoriaId = 2,
                            Descricao = "A dança para crianças traz benefícios como desenvolvimento da coordenação motora, melhora da postura, expressão artística, além de promover a socialização e autoconfiança.",
                            Foto = "/img/services/services-4.jpg",
                            Nome = "Dance Kids"
                        },
                        new
                        {
                            Id = 5,
                            CategoriaId = 2,
                            Descricao = "A Dance Teen traz benefícios como melhora da coordenação motora, flexibilidade, condicionamento físico e postura. Além disso, a dança promove a expressão, autoconfiança e bem-estar.",
                            Foto = "/img/services/services-5.jpg",
                            Nome = "Dance Teen"
                        },
                        new
                        {
                            Id = 6,
                            CategoriaId = 2,
                            Descricao = "A aula das Divas traz benefícios como melhora da flexibilidade, equilíbrio coordenação motora e mobilidade articular. Além disso, a dança promove o convívio social, estimula a memória e melhora o humor.",
                            Foto = "/img/services/services-6.jpg",
                            Nome = "Divas"
                        },
                        new
                        {
                            Id = 7,
                            CategoriaId = 2,
                            Descricao = " O Fit Dance traz benefícios como melhora do condicionamento físico, queima de calorias, fortalecimento muscular, aumento da coordenação motora e melhora do equilíbrio.",
                            Foto = "/img/services/services-7.jpg",
                            Nome = "Fit Dance"
                        },
                        new
                        {
                            Id = 8,
                            CategoriaId = 2,
                            Descricao = "O Jazz traz benefícios como desenvolvimento da flexibilidade, força muscular, coordenação motora e resistência cardiovascular.",
                            Foto = "/img/services/services-8.jpg",
                            Nome = "Jazz"
                        },
                        new
                        {
                            Id = 9,
                            CategoriaId = 1,
                            Descricao = "A musculação é um tipo de exercício realizado com pesos de diversas cargas, amplitude e tempo de contração, o que faz dela uma atividade física indicada para pessoas de diversas idades e com diferentes objetivos.",
                            Foto = "/img/services/services-10.jpg",
                            Nome = "Musculação"
                        },
                        new
                        {
                            Id = 10,
                            CategoriaId = 1,
                            Descricao = "A aula de Funcional é um esporte que envolve a prática de uma série de movimentos que requer força, flexibilidade e coordenação motora.",
                            Foto = "/img/services/services-12.jpg",
                            Nome = "Funcional"
                        },
                        new
                        {
                            Id = 11,
                            CategoriaId = 3,
                            Descricao = "Os exercícios de alongamento promovem um estiramento das fibras musculares,  aumentando a flexibilidade do músculo. O corpo ganha elasticidade, melhorando o desempenho nas atividades físicas e nas tarefas diárias.",
                            Foto = "/img/services/services-11.jpg",
                            Nome = "Alongamento"
                        },
                        new
                        {
                            Id = 12,
                            CategoriaId = 1,
                            Descricao = "Consiste em fazer exercícios diversos utilizando o auxílio de um step. Essa modalidade inclui exercícios que movimentam braços e pernas. A dificuldade do movimento pode ser regulada pela intensidade de movimentos.",
                            Foto = "/img/services/services-13.jpg",
                            Nome = "Step"
                        });
                });

            modelBuilder.Entity("AcademiaCintia.Models.Professor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Cargo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Facebook")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Instagram")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("Id");

                    b.ToTable("Professor");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cargo = "Diretora",
                            Facebook = "https://www.facebook.com/cintia.reco",
                            Instagram = "https://www.instagram.com/cintiareco/",
                            Nome = "Cintia Reco"
                        },
                        new
                        {
                            Id = 2,
                            Cargo = "Professora Infantil e Juvenil",
                            Facebook = "https://www.facebook.com/raissa.reco",
                            Instagram = "https://www.instagram.com/raissa.recco/",
                            Nome = "Raissa Reco"
                        },
                        new
                        {
                            Id = 3,
                            Cargo = "Professora Infantil",
                            Facebook = "https://www.facebook.com/jooh.silva.1656",
                            Instagram = "https://www.instagram.com/jo.silvacs/",
                            Nome = "Joany Silva"
                        },
                        new
                        {
                            Id = 4,
                            Cargo = "Gym Trainer",
                            Facebook = "https://www.facebook.com/vitor.baldi.5",
                            Instagram = "https://www.instagram.com/vitor.baldi_/",
                            Nome = "Vitor Baldi"
                        },
                        new
                        {
                            Id = 5,
                            Cargo = "Gym Trainer",
                            Facebook = "https://www.facebook.com/roberta.garcia.315",
                            Instagram = "https://www.instagram.com/rogarciadias/",
                            Nome = "Roberta Garcia"
                        },
                        new
                        {
                            Id = 6,
                            Cargo = "Professora de Ballet Adulto",
                            Facebook = "https://www.facebook.com/luana.ruiz.754",
                            Instagram = "https://www.instagram.com/luanaruiiz/",
                            Nome = "Luana Ruiz"
                        },
                        new
                        {
                            Id = 7,
                            Cargo = "Professor de Zumba",
                            Facebook = "https://www.facebook.com/rauldaniel.pinheiro",
                            Instagram = "https://www.instagram.com/rahul_black_swan/",
                            Nome = "Raul Pinheiro"
                        },
                        new
                        {
                            Id = 8,
                            Cargo = "Professora Fit Dance Teen & Kids",
                            Facebook = "https://www.facebook.com/profile.php?id=100015112025441",
                            Instagram = "https://www.instagram.com/tathy.7mene/ ",
                            Nome = "Tathy Meneghesso"
                        });
                });

            modelBuilder.Entity("AcademiaCintia.Models.Usuario", b =>
                {
                    b.Property<string>("UsuarioId")
                        .HasColumnType("varchar(255)");

                    b.Property<DateTime>("DataNascimento")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Foto")
                        .HasMaxLength(300)
                        .HasColumnType("varchar(300)");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("UsuarioId");

                    b.ToTable("Usuario");

                    b.HasData(
                        new
                        {
                            UsuarioId = "4136304a-88c6-4c6d-9f5b-4d9b6efe365c",
                            DataNascimento = new DateTime(1981, 8, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Foto = "/img/users/avatar.png",
                            Nome = "José Antonio Gallo Junior"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "9557ec73-02cf-45ed-8430-f5ee215ec3c7",
                            ConcurrencyStamp = "6b0b860c-fd49-462f-bffd-eea9d638aeb9",
                            Name = "Administrador",
                            NormalizedName = "ADMINISTRADOR"
                        },
                        new
                        {
                            Id = "6062c088-c5e0-46f8-9cba-539adeb7a901",
                            ConcurrencyStamp = "8941b78d-5c5a-4d04-9918-2caccb3c9870",
                            Name = "Funcionário",
                            NormalizedName = "FUNCIONARIO"
                        },
                        new
                        {
                            Id = "59a3d8b8-6c4d-4a7d-8fdc-8a2de6060167",
                            ConcurrencyStamp = "0fac4e67-c558-4fbc-b2a4-6d484fbdb6c8",
                            Name = "Cliente",
                            NormalizedName = "CLIENTE"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4136304a-88c6-4c6d-9f5b-4d9b6efe365c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "629aea2f-c23c-4c55-8719-c450cdebc895",
                            Email = "admin@cozastore.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@COZASTORE.COM",
                            NormalizedUserName = "ADMIN",
                            PasswordHash = "AQAAAAEAACcQAAAAEOGeId66WrwYrmFzj93vNiBcJgVUodIjnrkhFVnDN/B3olQzMSKFKE5bOP3Kd9f1Fg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ae483978-ec90-4399-b509-1229fb8ecd98",
                            TwoFactorEnabled = false,
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "4136304a-88c6-4c6d-9f5b-4d9b6efe365c",
                            RoleId = "9557ec73-02cf-45ed-8430-f5ee215ec3c7"
                        },
                        new
                        {
                            UserId = "4136304a-88c6-4c6d-9f5b-4d9b6efe365c",
                            RoleId = "6062c088-c5e0-46f8-9cba-539adeb7a901"
                        },
                        new
                        {
                            UserId = "4136304a-88c6-4c6d-9f5b-4d9b6efe365c",
                            RoleId = "59a3d8b8-6c4d-4a7d-8fdc-8a2de6060167"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("AcademiaCintia.Models.Modalidade", b =>
                {
                    b.HasOne("AcademiaCintia.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("AcademiaCintia.Models.Usuario", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AccountUser")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AccountUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
